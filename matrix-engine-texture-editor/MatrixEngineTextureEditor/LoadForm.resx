<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>