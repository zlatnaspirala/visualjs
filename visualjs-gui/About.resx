<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label9.Text" xml:space="preserve">
    <value>creator : Nikola Lukic
about : Visual JS 2d canvas multiplatform game engine
This is JavaScript game engine (server part node.js / client part js)
Js framework with windows GUI editor and game instance creator.

**Basic licence rules :**

1) Each file in this project has its own license , be careful , 
do not violate the basic rules.

2) You are free to use any version of Visual JS library in 
any other project (even commercial projects) as long as
 the copyright header is left intact
Except for plugins on sale and graphics that come with 
them (they have special commercial licence).

3)Please read the following terms and conditions
 before using this application:

Disclaimer of warranty
'Visual js' is provided "as-is" and without warranty
 of any kind, express, implied or otherwise, 
including without limitation, any warranty of
 merchantability or fitness for a particular purpose. 
In no event shall the author of this software be held 
liable for data loss, damages, loss of profits or any
 other kind of loss while using or misusing this software.


External licences in this project :
Webcam NUI control is under :
 Created by Romuald Quantin. http://creativecommons.org/licenses/by-nc-sa/3.0/

Download from : 
https://www.adobe.com/devnet/archive/html5/articles/javascript-motion-detection.html

WEBRTC - webcam communication is under : 
Creator Muaz Khan

www.MuazKhan.com MIT License - www.WebRTC-Experiment.com/licence

Experiments - github.com/muaz-khan/WebRTC-Experiment

Installation and setup :

In server Instance folder (navigate to server_instance/)
1) Install next modules :
In node.js command prompt or console enter next installation command :
npm install mysql
npm install delivery
npm install express
npm install mkdirp
npm install socket.io
npm install nodemailer@0.7.0
Setup config.js
You will find config.js in server_instance folder : 
(All node.js application you can find in same folder (server_instance) . 
Some app have local usage )
module.exports = {

VERSION : "0.5",
PATH_OF_NODE_APP : "D:/PATH_TO_SERVER_INSTANCE_FOLDER/server/" , // EDIT HERE
PATH_OF_WWW : "D:/xamp/htdocs/project_instance/", // PATH_TO_WWW EDIT HERE
EDITOR_PORT : "1013",
REG_PATH : "users/",
ACCOUNT_PORT : 3666 , 
DESTROY_SESSION_AFTER_X_mSECUNDS : 20000,
};


};
This is all .
CLIENT OR WEB APPLICATION #
How to start :
1) Copy project_instance/ folder to the www folder or use visual-js.exe
 and create new application (select folder for www and server path).
2) start server_instance/editor.js
3) In browser navigate to project-instance folder (index.html)

Click right button and you will see content menu . First item is **Add New game object** .
Than your game objectn will show at web page. Right click on rectangle area to see game object
 cantent menu. **local node.js application tools** ( *Use this in develop mode only* ): #
- server_instance/res.js - create RESOURCE js object ( ADD image or images for animation )
put image or images in one folder for example TEST_RES/ . Put that folder in this location **project_instance/res/** .
run server_instance/node res.js 
After finishing restart web page ind enter in console RESOURCE.TEST_RES

RESOURCE have all images path data. When you create folder with image
 and build with *node res.js* we did not create images object.
Images object will be created after you add animation to the game objects.

This is good because memory safe.
- server_instance/editor.js
create game objects direct in web browser view.

ON/PAGE editor use node.js in background for editor
jobs, Visual source editor use c# for editor operation.

Node.js is a trademark of Joyent, Inc. and is
used with its permission.I not endorsed 
by or affiliated with Joyent.

</value>
  </data>
</root>